package mnadyukov.server.dbase;

import java.util.*;
import java.sql.*;
import mnadyukov.server.ErrorJournalManager;

/**
*<p>
*Абстрактный класс, от которого должны быть наследованы все классы, выполняющие SQL выражения.
*</p>
*Все классы, выполняющие SQL выражения, должны находиться в пакете mnadyukov.server.dbase.
*/
public abstract class SQLStatement{
	
	/**
	*<p>
	*Соединение с базой данных, через которое могут выполняться запросы.
	*</p>
	*Не должно закрываться объектом SQLStatement.
	*/
	protected Connection conn;
	
	/**
	*<p>
	*Объект, в который будет помещен результат зарпроса и который будет возвращен вызывающему методу.
	*</p>
	*Содержит набор строк (объекты Object[]).
	*Каждая строка содержит массив значений Object.
	*Вызывающий метод должен явно привести объекты Object к нужному классу.
	*/
	protected ArrayList<Object[]> Result;
	
	/**
	*<p>
	*Общий конструктор объектов SQLStatement.
	*</p>
	*@param cnn Соединение с базой данных, через которое могут выполняться запросы.
	*Данное соединение не должно закрываться объектом SQLStatement.
	*Сам объект SQLStatement также может создавать объекты Connection для соединения с базой данных.
	*Такие соединения обязательно должны закрываться самим объектом SQLStatement.
	*/
	public SQLStatement(Connection cnn){
		conn=cnn;
	}
	
	/**
	*<p>
	*Выполняет SQL выражение и возвращает результат его выполнения.
	*</p>
	*@param params Параметры, необходимые для выполнения SQL выражения.
	*Все передаваемые параметры перед передачей методу должны быть преобразованы в String.
	*@return Таблица значений Object.
	*Для примитивных типов используются классы-обертки.
	*В вызывающем методе полученные значения Object должны быть преобразованы к необходимому типу.
	*Пустая таблица, если не было выбрана ни одной строки данных.<br>
	*null, если произошла ошибка (исключение).
	*/
	public abstract ArrayList<Object[]> execute(ArrayList<String> params);
	
}